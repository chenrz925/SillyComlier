cmake_minimum_required(VERSION 3.7)
project(SillyComplier)

set(CMAKE_CXX_STANDARD 14)

option(SHAREDLIB ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
enable_testing()
find_package(GTest REQUIRED)
find_package(Flex REQUIRED)
include_directories(${GTEST_INCLUDE_DIRS})
include_directories(${LLVM_INCLUDE_DIRS})
include_directories(/opt/local/include/glib-2.0 /opt/local/lib/glib-2.0/include /opt/local/include)
link_directories(/opt/local/lib)
# Scanner CMAKE
execute_process(COMMAND flex ${PROJECT_SOURCE_DIR}/src/SLScanner/LexicalAnalysis.l)
execute_process(COMMAND clang -lfl -I/opt/local/include/glib-2.0 -I/opt/local/lib/glib-2.0/include -I/opt/local/include -L/opt/local/lib -lglib-2.0 -lintl lex.yy.c -o LexicalAnalysis)
execute_process(COMMAND mv lex.yy.c ${PROJECT_SOURCE_DIR}/src/SLParser/LexicalAnalysis.c)
aux_source_directory(src/SLScanner SLSRCScanner)
aux_source_directory(test/SLScanner SLTSRCScanner)
if (SHAREDLIB EQUAL ON)
    add_library(SLScanner SHARED ${SLSRCScanner})
else ()
    add_library(SLScanner STATIC ${SLSRCScanner})
endif ()
add_executable(TESTScanner ${SLTSRCScanner})
target_include_directories(TESTScanner PUBLIC include)
target_link_libraries(TESTScanner ${GTEST_BOTH_LIBRARIES})
target_link_libraries(TESTScanner SLScanner)
add_test(SLTESTScanner TESTScanner)
target_include_directories(SLScanner PUBLIC include)
# Mini C Scanner in C Demo CMAKE
add_executable(MiniCScannerDemo src/SLExecute/MiniCScannerDemo.cpp)
target_include_directories(MiniCScannerDemo PUBLIC include)
target_link_libraries(MiniCScannerDemo SLScanner)
# Parser CMAKE
set(SLParserLST src/SLParser/TokenWrapper.cpp include/SLParser/TokenWrapper.hpp src/SLParser/LexicalAnalysis.c)
if (SHAREDLIB EQUAL ON)
    add_library(SLParser ${SLParserLST})
else ()
    add_library(SLParser ${SLParserLST})
endif ()
target_include_directories(SLParser PUBLIC include)
target_include_directories(SLParser PUBLIC src)
aux_source_directory(test/SLParser SLTSRCParser)
add_executable(TESTParser ${SLTSRCParser})
target_link_libraries(TESTParser SLParser)
target_link_libraries(TESTParser ${GTEST_BOTH_LIBRARIES})
target_include_directories(TESTParser PUBLIC include)
target_link_libraries(SLParser glib-2.0 fl)
